Answers for Lab 2
-----------------------------------------------

EXERCISE 1

1. This question refers to variables data1 and data2 in class TestDataTypes. For each one of the following statements indicate whether the comparison will return the value true or false

data1 == data2: true or false? false
data1.intVar == data2.intVar: true or false? true
data1.charVar == data2.charVar: true or false? true
data1.boolVar == data2.boolVar: true or false? true
data1.doubleVar == dta2.doubleVar: true or false? true
data1.varA == data2.varA: true or false? false
data1.varA.numItems == data2.varA.numItems: true or false? true
data1.varA.arrItems == data2.varA.arrItems: true or false? true

2. How many of your answers to question 1 were incorrect? 
One of my answers were incorrect in question 1.

3. Why was the result of the last comparison true, even though arrays are non-primitive types?
In the code, both data1.varA.arrItems and data2.varA.arrItems are assigned the same array object, testArray, which is created outside the DataTypes class. 
Therefore, data1.varA.arrItems and data2.varA.arrItems both reference the same array object in memory, so the comparison data1.varA.arrItems == data2.varA.arrItems returns true
EXERCISE 3

4. What causes the first compilation error?
The first compilation error in this code is caused by the line:
	i = counter;
This line attempts to assign the value of the instance variable "counter" to the local variable "i", but "counter" is an instance variable and must be accessed through an instance of the ClassB. 
Since the main method is static, it cannot access non-static fields directly. To fix this error, you can create an instance of the ClassB and use that to access the "counter" variable.

EXERCISE 4

5. Why does program CountObjects prints a message indicating that only one object was created, even though the program created more than one object of class ClassC?
The class CountObjects only outputs a message indicating that only one object was created because the program is only keeping track of the number of objects created by the counter variable in the last instance of ClassC that was created. 
Each time a new instance of ClassC is created, the previous instance's counter variable is overwritten with a new value of 1. 
As a result, the program only keeps track of the number of objects created by the last instance of ClassC and not the total number of objects created throughout the program.
