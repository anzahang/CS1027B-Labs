Answer the following questions.

EXERCISE 1
----------

1. Which suggestion made by Eclipse to fix the error in line 16 makes sense? The suggestion made by Eclipse to fi the error in line 16 that would make sense is to change the private int,
i into static so it can be accessible across classes.

2. What is the error in line 21? The error in line 21 is that there are closing and opening brackets around the System.out.println() statement. Because of these brackets, Eclipse 
interprets the line to be outside of the method, therefore believes it is an invalid declaration for a new method. Eclipse sees that the main method ends at the closing brackets, 
and to fix this, the closing and opening brackets should be removed. Furthermore, to adhere to standard code structure, line 21 should also be indented so that it is inside the main method.

3. What line caused the program to crash? The program will crash on line 16, with an ArrayIndexOutOfBoundsException.

Why does the program crash? The program will crash because the loop condition in the main method is i <= Errors.i, so it runs one iteration too many, 
trying to access an index that does not exist in the arr array. This leads to the exception being thrown. To fix the error, the loop condition should be i < Errors.i.

4. What do you think the program is going to print? I think the program is going to print: 
10
i = 3 arr[0] = 10 arr[1] = 10 arr[2] = 10


EXERCISE 2
----------

5. Which line of the program causes it to crash? The line causing the program to crash is:

testArray[i][j] = (i + 1) * j;

The reason the program crashes is because arrays in Java are 0-indexed. 
The value of j ranges from 1 to 6, but the value of j should range from 0 to 5 to access the correct index in the 2D array testArray.

6. Why did the value of testArray[0][0] not change? The value of testArray[0][0] doesn't change because it is being assigned a value of (i + 1) * j, 
where i=0 and j=1. In the expression, i is first incremented by 1 (i + 1), which makes it 1. Then, j is multiplied by this new value of i, 
which is 1 * j = 1 * 1 = 1. Therefore, the value of testArray[0][0] is assigned 1.


EXERCISE 3
----------

7. Which line of the program causes it to crash? The line that makes the program crash is: 
total = (i * 100) / load;

8. Which line is highlighted after pressing F6? total = (i * 100) / load; is highlighted after pressing F6.

9. What is the difference between F6 (Step over) and F5 (Step into)? 
"Step Over" allows the programmer to execute the current line of code and move to the next line without entering into any method calls that are present on the current line.

"Step Into" allows the programmer to move into the method call, so that the debugger stops at the first line of the method, 
and the programmer can step through the code line by line within the method.

In simple terms, if a line of code has a method call, 
then "Step Over" will execute the entire method call in one step, while "Step Into" allows the programmer to step into the method and inspect its inner workings.

10. Why does the program crashes if you press F6 again? If F6 is pressed again, the program will proceed to the line that causes the program to crash.


EXERCISE 4
----------

11. Why the compiler shows an error even though i has been declared in the loop: for (int i = 1; i < 2; ++i)? 
The line i = 8 generates a compiler error because the variable i is declared within the scope of the for loop, 
and therefore is not accessible outside of the loop. The error message would say something like "i cannot be resolved to a variable".

12. What do you think will be the values of variables var1 and the String in obj1 immediately after method2(obj1) is executed? 
After method2(obj1) is executed, the value of var1 is 20 and the name stored in obj1 is still "joe".

13. What are the correct values of variables var1 and the String in obj1 immediately after method2(obj1) is executed? 
After method2(obj1) is executed, the value of var1 is -20 and the name stored in obj1 is still "joe".

14. Why is the result of the comparison (obj1 == obj2) false even though both obj1 and obj2 contain the same information, namely "joe"? 
The comparison (obj1 == obj2) is false because obj1 and obj2 are references to different objects, even though they both contain the same information, "joe". 
In Java, two references are equal only if they refer to the same object in memory. 
In method2, obj1 is a new object created inside the method and obj2 is a reference passed as a parameter.